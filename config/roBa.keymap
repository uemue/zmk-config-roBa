#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E             &kp R         &kp T                                          &kp Y            &kp U        &lt 5 I           &kp O           &kp P
&mt LEFT_GUI A    &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LCTRL F   &kp G        &kp LS(LG(S))      &kp MINUS      &kp H            &mt LCTRL J  &mt LEFT_SHIFT K  &mt LEFT_ALT L  &mt LEFT_GUI MINUS
&mt LEFT_SHIFT Z  &kp X           &kp C             &kp V         &kp B        &kp COLON          &kp SEMICOLON  &kp N            &kp M        &kp COMMA         &kp DOT         &kp SLASH
&kp LCTRL         &kp LEFT_WIN    &kp LEFT_ALT      &kp LEFT_GUI  &lt 1 SPACE  &lt 2 TAB          &lt 2 ENTER    &lt 1 BACKSPACE                                                 &mo 5
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM_ARROWS {
            bindings = <
&kp ESCAPE    &kp N7        &kp NUMBER_8  &kp NUMBER_9  &trans                         &kp PAGE_UP    &kp HOME        &kp UP_ARROW    &kp END          &kp F4
&kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans     &trans      &trans  &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F2
&trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans     &trans      &trans  &trans         &trans          &trans          &kp F7           &kp F10
&trans        &trans        &trans        &trans        &kp LANG2  &trans      &trans  &kp LANG1                                                       &trans
            >;
        };

        SYMBOLS {
            bindings = <
&trans    &kp LS(NUMBER_6)  &kp LS(INT3)      &kp LS(SQT)   &trans                                &kp LS(NUMBER_4)  &kp LBKT                 &kp LS(RBKT)      &kp LS(NUHS)      &trans
&kp INT3  &kp LS(N2)        &kp LS(NUMBER_7)  &kp MINUS     &kp LS(MINUS)     &trans      &trans  &kp LS(EQUAL)     &kp LS(INTERNATIONAL_1)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(LBKT)
&trans    &kp SEMI          &kp SQT           &kp LS(SEMI)  &kp LS(NUMBER_5)  &trans      &trans  &kp EQUAL         &kp LS(NUMBER_3)         &kp RBKT          &kp NUHS          &kp LS(NUMBER_1)
&trans    &trans            &trans            &trans        &trans            &trans      &trans  &trans                                                                         &trans
            >;
        };

        NOT_USED {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                      &trans  &trans     &trans     &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans      &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans      &trans  &trans  &trans     &trans     &trans  &trans
&bt BT_CLR    &trans        &trans        &trans        &trans        &trans      &trans  &trans                                &trans
            >;
        };

        NOT_USED2 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
